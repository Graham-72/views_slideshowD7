<?php
// $Id$

/**
 * @file
 * Provides Slideshow style options for Views.
 */

/**
 * Implement hook_theme().
 */
function views_slideshow_theme($existing, $type, $theme, $path) {
  return array(
    'views_slideshow_main_section' => array(
      'arguments' => array('vss_id' => NULL, 'slides' => NULL, 'plugin' => NULL),
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_pager_widget_render' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array(), 'location' => NULL, 'rows' => array()),
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_pager_fields_render' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array(), 'location' => NULL, 'attributes' => array()),
      'template' => 'theme/views-slideshow-pager-field',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_pager_field_field' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'count' => NULL),
      'template' => 'theme/views-slideshow-pager-field-field',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_pager_field_item' => array(
      'arguments' => array('vss_id' => NULL, 'item' => NULL, 'count' => NULL),
      'template' => 'theme/views-slideshow-pager-field-item',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_controls_widget_render' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array(), 'location' => NULL, 'rows' => array()),
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_controls_text_render' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array(), 'location' => NULL, 'rows' => array()),
      'template' => 'theme/views-slideshow-controls-text',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_controls_text_previous' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array()),
      'template' => 'theme/views-slideshow-controls-text-previous',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_controls_text_pause' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array()),
      'template' => 'theme/views-slideshow-controls-text-pause',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_controls_text_next' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array()),
      'template' => 'theme/views-slideshow-controls-text-next',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_slide_counter_widget_render' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array(), 'location' => NULL, 'rows' => array()),
      'file' => 'theme/views_slideshow.theme.inc',
    ),
    'views_slideshow_slide_counter' => array(
      'arguments' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array(), 'location' => NULL, 'rows' => array()),
      'template' => 'theme/views-slideshow-slide-counter',
      'file' => 'theme/views_slideshow.theme.inc',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function views_slideshow_views_api() {
  return array(
    'api' => '3.0-alpha1',
  );
}

/**
 * Implements hook_help().
 */
function views_slideshow_help($path, $arg) {
  switch ($path) {
    case 'admin/help#views_slideshow':
      if (module_exists('advanced_help')) {
        $output = '<p>' . l(t('Click here to view the documentation for Views Slideshow'), 'admin/advanced_help/views_slideshow') . '</p>';
      }
      else {
        $output = '<p>' . t('Views Slideshow help can be found by installing and enabling the !help.',  array('!advanced_help' => l(t('Advanced Help module'), 'http://drupal.org/project/advanced_help'))) . '</p>';
      }
      return $output;
  }
}

/**
 * Implements hook_init().
 */
function views_slideshow_init() {
  // Load javascript on the page in init to help fool caching.
  drupal_add_js(drupal_get_path('module', 'views_slideshow') . '/js/views_slideshow.js');
}

function views_slideshow_views_slideshow_js_method_register() {
  return array(
    'viewsSlideshowPagerFields',
    'viewsSlideshowControlsText',
    'viewsSlideshowSlideCounter',
  );
}

/**
 * Implementation of hook_views_slideshow_skins().
 */
function views_slideshow_views_slideshow_skins() {
  return array(
    'default' => array(
      'title' => t('Default'),
    ),
  );
}

/**
 * Implements hook_views_slideshow_widget_info().
 */
function views_slideshow_views_slideshow_widget_info() {
  return array(
    'views_slideshow_pager' => 'Pager',
    'views_slideshow_controls' => 'Controls',
    'views_slideshow_slide_counter' => 'Slide Counter',
  );
}

/**
 * Implements [widget]_views_slideshow_widget_form_options().
 */
function views_slideshow_pager_views_slideshow_widget_form_options(&$form, &$form_state, &$view, $defaults, $dependency) {
  // Get all the pager info from other modules.
  // hook_views_slideshow_pager_settings($view, $option_values, $dependency_prefix)
  $pagers = module_invoke_all('views_slideshow_widget_pager_settings', $view);
  
  if (!empty($pagers)) {
    asort($pagers);
    
    // Create the widget type field.
    $form['type'] = array(
      '#type' => 'select',
      '#title' => t('Pager Type'),
      '#description' => t('Style of the pager'),
      '#default_value' => $defaults['type'],
      '#options' => $pagers,
      '#process' => array('views_process_dependency'),
      '#dependency' => array($dependency . '-enable' => array(1)),
    );
    
    // Add any additional form elements
    // Build our arguments to pass to
    // [pager-type]_views_slideshow_widget_pager_form_options
    $arguments = array(
      &$form,
      &$form_state,
      &$view,
      $defaults,
      $dependency,
    );
    
    foreach ($pagers as $pager_key => $pager_title) {
      $function = $pager_key . '_views_slideshow_widget_pager_form_options';
      if (function_exists($function)) {
        call_user_func_array($function, $arguments);
      }
    }
  }
  else {
    $form['enable_pager'] = array(
      '#value' => 'There are no pagers available.',
    );
  }
}

/**
 * Implementation of hook_views_slideshow_pager_settings
 */
function views_slideshow_views_slideshow_widget_pager_settings($view) {
  $settings = array();
  // Settings for fields pager.
  // First verfiy that the view is using fields.
  if ($view->row_plugin->uses_fields()) {
    $settings = array(
      'views_slideshow_pager_fields' => t('Fields'),
    );
  }
  
  return $settings;
}

/**
 * Implementation [widget-type]_views_slideshow_pager_form_options
 */
function views_slideshow_pager_fields_views_slideshow_widget_pager_form_options(&$form, &$form_state, &$view, $defaults, $dependency) {
  // Settings for fields pager.
  $options = array();
  // Get each field and it's name. 
  foreach ($view->display->handler->get_handlers('field') as $field => $handler) {
    $options[$field] = $handler->ui_name();
  }
  
  // Add ability to choose which fields to show in the pager.
  $form['views_slideshow_pager_fields_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Pager fields'),
    '#options' => $options,
    '#default_value' => $defaults['views_slideshow_pager_fields_fields'],
    '#description' => t("Choose the fields that will appear in the pager."),
    '#prefix' => '<div id="' . $dependency . '-views-slideshow-pager-fields-fields-wrapper">',
    '#suffix' => '</div>',
    '#process' => array(
      'expand_checkboxes',
      'views_process_dependency',
    ),
    '#dependency_count' => 2,
    '#dependency' => array(
      $dependency . '-enable' => array(1),
      $dependency . '-type' => array('views_slideshow_pager_fields'),
    )
  );
  
  // Add field to see if they would like to activate slide and pause on pager
  // hover
  $form['views_slideshow_pager_fields_hover'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate Slide and Pause on Pager Hover'),
    '#default_value' => $defaults['views_slideshow_pager_fields_hover'],
    '#description' => t('Should the slide be activated and paused when hovering over a pager item.'),
    '#prefix' => '<div id="' . $dependency . '-views-slideshow-pager-fields-hover-wrapper">',
    '#suffix' => '</div>',
    '#process' => array(
      'views_process_dependency',
    ),
    '#dependency_count' => 2,
    '#dependency' => array(
      $dependency . '-enable' => array(1),
      $dependency . '-type' => array('views_slideshow_pager_fields'),
    ),
  );
}

/**
 * Implements [widget]_views_slideshow_widget_form_options().
 */
function views_slideshow_controls_views_slideshow_widget_form_options(&$form, &$form_state, &$view, $defaults, $dependency) {
  // Get all the pager info from other modules.
  // hook_views_slideshow_controls_settings($view, $option_values, $dependency_prefix)
  $controls = module_invoke_all('views_slideshow_widget_controls_settings', $view);
  
  if (!empty($controls)) {
    asort($controls);
    
    // Create the widget type field.
    $form['type'] = array(
      '#type' => 'select',
      '#title' => t('Controls Type'),
      '#description' => t('Style of the controls'),
      '#default_value' => $defaults['type'],
      '#options' => $controls,
      '#process' => array('views_process_dependency'),
      '#dependency' => array($dependency . '-enable' => array(1)),
    );
    
    // Add any additional form elements
    // Build our arguments to pass to
    // [pager-type]_views_slideshow_widget_pager_form_options
    $arguments = array(
      &$form,
      &$form_state,
      &$view,
      $defaults,
      $dependency,
    );
    
    foreach ($controls as $control_key => $control_title) {
      $function = $control_key . '_views_slideshow_widget_controls_form_options';
      if (function_exists($function)) {
        call_user_func_array($function, $arguments);
      }
    }
  }
  else {
    $form['enable_controls'] = array(
      '#value' => 'There are no controls available.',
    );
  }
}

/**
 * Implementation of hook_views_slideshow_controls_settings
 */
function views_slideshow_views_slideshow_widget_controls_settings($view) {
  $settings = array(
    'views_slideshow_controls_text' => t('Text'),
  );
  
  return $settings;
}

/**
 * Implements hook_views_slideshow_option_definition.
 */
function views_slideshow_views_slideshow_option_definition() {
  
  // Default slideshow type and skins
  $options['slideshow_type'] = array('default' => '');
  $options['slideshow_skin'] = array('default' => '');
  
  // Set default widgets and weight values.
  $widgets = module_invoke_all('views_slideshow_widget_info');
  if ($widgets) {
    $locations = array('top', 'bottom');
    foreach ($locations as $location) {
      foreach ($widgets as $widget_id => $widget_name) {
        $options['widgets']['contains'][$location]['contains'][$widget_id]['enable'] = array('default' => 0);
        $options['widgets']['contains'][$location]['contains'][$widget_id]['contains']['weight'] = array('default' => 1);
      }
    }
  }
  
  // Defaults for the pager widget.
  foreach ($locations as $location) {
    $options['widgets']['contains'][$location]['contains']['views_slideshow_pager']['contains']['type'] = array('default' => 0);
    $options['widgets']['contains'][$location]['contains']['views_slideshow_pager']['contains']['views_slideshow_pager_numbered_hover'] = array('default' => 0);
    $options['widgets']['contains'][$location]['contains']['views_slideshow_pager']['contains']['views_slideshow_pager_numbered_click_to_page'] = array('default' => 0);
    $options['widgets']['contains'][$location]['contains']['views_slideshow_pager']['contains']['views_slideshow_pager_thumbnails_hover'] = array('default' => 0);
    $options['widgets']['contains'][$location]['contains']['views_slideshow_pager']['contains']['views_slideshow_pager_thumbnails_click_to_page'] = array('default' => 0);
    $options['widgets']['contains'][$location]['contains']['views_slideshow_pager']['contains']['views_slideshow_pager_fields_fields'] = array('default' => array());
    $options['widgets']['contains'][$location]['contains']['views_slideshow_pager']['contains']['views_slideshow_pager_fields_hover'] = array('default' => 0);
    
    $options['widgets']['contains'][$location]['contains']['views_slideshow_controls']['contains']['type'] = array('default' => 0);
  }
  
  return $options;
}



